#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>
#include <limits.h>
#include <dirent.h>

int mycwd() {
    char cwd[PATH_MAX];
    if (getcwd(cwd, PATH_MAX) != NULL) {
        printf("%s\n", cwd);
    } else {
        perror("getcwd() error");
        return 1;
    }
    return 0;
}

int mymkdir() {
    char pat[PATH_MAX];
    printf("Nome do diretório: ");
    scanf("%s", pat);
    if (mkdir(pat, 0755) != 0) {  
        perror("mkdir() error");
        return 1;
    }
    return 0;
}

int myrmdir() {
    char diretorio[PATH_MAX];
    printf("Nome do diretório: ");
    scanf("%s", diretorio);
    if (rmdir(diretorio) != 0) {
        perror("rmdir() error");
        return 1;
    } else {
        printf("Diretório removido!\n");
    }
    return 0;
}

int mycd() {
    char diretorio[PATH_MAX];
    printf("Nome do diretório: ");
    scanf("%s", diretorio);
    if (chdir(diretorio) != 0) { 
        perror("chdir() error");
        return 1;
    }
    return 0;
}

int mystat() {
    struct stat statbuf;
    char diretorio[PATH_MAX]; 

    printf("Nome do arquivo/diretório: ");
    scanf("%s", diretorio);

    if (stat(diretorio, &statbuf) == -1) { 
        perror("stat() error");
        return 1;
    }

    printf("Tamanho: %lld bytes\n", (long long)statbuf.st_size);
    printf("Modo: %o\n", statbuf.st_mode);
    printf("Número de links: %ld\n", (long)statbuf.st_nlink);
    printf("UID do dono: %d\n", statbuf.st_uid);
    printf("GID do grupo: %d\n", statbuf.st_gid);

    return 0;
}

int myls() {
    DIR *dir;
    struct dirent *entry;
    char diretorio[PATH_MAX];

    printf("Nome do diretório (ou . para atual): ");
    scanf("%s", diretorio);

    dir = opendir(diretorio);
    if (dir == NULL) {
        perror("opendir() error");
        return 1;
    }

    printf("Conteúdo do diretório '%s':\n", diretorio);
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    closedir(dir);
    return 0;
}

int main() {
    int test = 0;
    while (test == 0) {
        char in[PATH_MAX];
        printf("myshell> ");
        scanf("%s", in);

        if (strcmp(in, "exit") == 0) {
            test = 1;
        } else if (strcmp(in, "cwd") == 0) {
            mycwd();
        } else if (strcmp(in, "mkdir") == 0) {
            mymkdir();
        } else if (strcmp(in, "rmdir") == 0) {
            myrmdir();
        } else if (strcmp(in, "cd") == 0) {
            mycd();
        } else if (strcmp(in, "stat") == 0) {
            mystat();
        } else if (strcmp(in, "ls") == 0) {
            myls();
        } else {
            printf("Comando não encontrado\n");
        }
    }
    return 0;
}
